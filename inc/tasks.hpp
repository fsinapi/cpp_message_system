/**
 * @file tasks.hpp
 * @brief Aggregates task queues
 */

#include <atomic>
#include <tuple>
#include <variant>
#include <memory>
#include <optional>

namespace tasks {

template<typename Q>
concept MsgQueue = requires(Q queue, Q::Message msg) {
    { queue.send(msg) } -> std::same_as<void>;
    { queue.try_read() } -> std::same_as<std::optional<typename Q::Message>>;
};


template<typename Queue>
struct MsgTag { };

/**
 * @brief Class to encapsulate a tasklist. This class functions as a central
 * mail-forwarding system in essence, redirecting messages to their 
 * appropriate messages.
 * 
 * @tparam MessageQueues 
 */
template<MsgQueue... MessageQueues>
class Tasks {
  public:
    using QueueTypes = 
        std::variant<typename MessageQueues::Tag...>;
    
    static constexpr size_t TaskCount = std::variant_size_v<QueueTypes>;

    Tasks() :
        _handles(),
        _initialized{false} {}
    
    /**
     * @brief Register a queue handle with the task list
     * 
     * @tparam Idx The index of this queue
     * @tparam Queue Type of the message queue
     * @param queue Handle to the queue
     */
    template<MsgQueue Queue>
    auto register_queue(Queue &queue) -> void {
        constexpr auto idx = get_task_idx<Queue>();
        if(_initialized.at(idx)) {
            // Error
            std::__throw_bad_exception();
        }
        std::get<idx>(_handles) = &queue;
        _initialized.at(idx) = true;
    }
    
    /**
     * @brief Get the index of a queue, as generated by the Task List
     * 
     * @tparam Message The type of the message
     * @return size_t A unique index for this message type
     */
    template<typename Queue>
    constexpr static auto get_task_idx() -> size_t {
        using Tag = typename Queue::Tag;
        return QueueTypes((Tag())).index();
    }

    /**
     * @brief Send a message
     * 
     * @tparam Idx The index of the message to send to, as returned by
     *             \ref get_task_idx()
     * @tparam Message The type of message to send
     * @param msg The message to send
     * @return true if the message could be sent, false otherwise
     */
    template<size_t Idx, typename Message>
    auto send_to(const Message& msg) -> bool {
        static_assert(Idx < TaskCount,
            "Invalid task index");
        if(!_initialized.at(Idx)) {
            return false;
        }
        std::get<Idx>(_handles)->send(msg);
        return true;
    }

    /**
     * @brief Send a message and automatically deduce the mailbox
     * to forward it to.
     * 
     * @tparam Message The type of message to send
     * @param msg The message to send
     * @return true if the message could be sent, false otherwise
     */
    template<typename Tag, typename Message>
    auto send(const Message& msg, const Tag& tag = (Tag())) -> bool {
        static_cast<void>(tag);
        constexpr auto idx = get_task_idx<Tag>();
        return send_to<idx>(msg);
    }

  private:
    // Handle for each of the tasks
    // Replace ptr with struct holding ptr
    std::tuple<MessageQueues*...> _handles;
    // Array mapping whether a task handle is initialized
    std::array<std::atomic_bool, TaskCount> _initialized;
};

};
